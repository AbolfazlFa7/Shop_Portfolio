"""
Django settings for Shop_Portfolio project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from environ import Env

env = Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', cast=str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', cast=bool, default=False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])


# Application Definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

LOCAL_APPS = [
    'authentication',
    'product.apps.ProductApiConfig',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'django_extensions',
    'debug_toolbar',
    'taggit',
    'django_filters'
]

INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS


MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

INTERNAL_IPS = env.list('INTERNAL_IPS')  # for debug_toolbar

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('DATABASE_ENGINE', cast=str, default='django.db.backends.sqlite3'),
        'NAME': env('DATABASE_NAME', cast=str, default=BASE_DIR / 'db.sqlite3'),
        # 'USER': env('DATABASE_USER',cast=str),
        # 'PASSWORD': env('DATABASE_PASSWORD',cast=str),
        # 'HOST': env('DATABASE_HOST',cast=str),
        # 'PORT': env('DATABASE_PORT',cast=str),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'authentication.utils.validators.CustomPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = env('TIME_ZONE', cast=str)

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Media
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User Model
AUTH_USER_MODEL = 'authentication.User'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}

# JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=363) if DEBUG else timedelta(hours=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'BLACKLIST_AFTER_ROTATION': True,
}

# DRF Spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'Shop Portfolio',
    'DESCRIPTION': 'This Api is for Shop Portfolio, It has Full Authentication and User Management, and products management',
    'VERSION': 'v1',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,


    'SWAGGER_UI_SETTINGS': {
        'persistAuthorization': True
    },

    'AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],

    'SECURITY_DEFINITIONS': {
        'JWTAuth': {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
        },
    },
    'ENUM_NAME_OVERRIDES': {  # just for not getting error in swagger, it has no use, and no need to update choies
        'OrderStatusEnum': [
            ('pending', 'Pending'),
            ('paid', 'Paid'),
            ('shipped', 'Shipped'),
            ('completed', 'Completed'),
            ('canceled', 'Canceled'),
        ],
        'PaymentStatusEnum': [
            ('pending', 'Pending'),
            ('success', 'Success'),
            ('failed', 'Failed'),
        ],
        'PaymentMethodEnum': [
            ('card', 'Card'),
        ],
    },
}


# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = env('EMAIL_HOST_USER', cast=str)
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', cast=str)
EMAIL_USE_TLS = True

# Kavenegar
KAVENEGAR_API_KEY = env('KAVENEGAR_API_KEY', cast=str)

# Cache
CACHES = {
    'default': {
        'BACKEND': env('CACHE_BACKEND', cast=str, default='django.core.cache.backends.locmem.LocMemCache'),
        'LOCATION': env('CACHE_LOCATION', cast=str, default='redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# Celery
CELERY_BROKER_URL = env('CELERY_BROKER_URL', cast=str)
CELERY_RESULT_BACKEND = env('CELERY_BROKER_URL', cast=str)
CELERY_ACCEPT_CONTENT = env('CELERY_ACCEPT_CONTENT', cast=list)
CELERY_TASK_SERIALIZER = env('CELERY_TASK_SERIALIZER', cast=str)
CELERY_RESULT_SERIALIZER = env('CELERY_RESULT_SERIALIZER', cast=str)
CELERY_TIMEZONE = os.environ.get('TIME_ZONE')

# TOTP
TOTP_INTERVAL = eval(env('TOTP_INTERVAL', cast=str))
TOTP_DIGITS = env('TOTP_DIGITS', cast=int)


# Zarinpal
ZARINPAL_SANDBOX = env('ZARINPAL_SANDBOX', cast=bool, default=False)
ZARINPAL_MERCHANT_ID = env('ZARINPAL_MERCHANT_ID', cast=str)
ZARINPAL_CALLBACK_URL = env('ZARINPAL_CALLBACK_URL', cast=str)
